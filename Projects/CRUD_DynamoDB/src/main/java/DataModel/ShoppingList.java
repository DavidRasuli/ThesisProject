package DataModel;

import DateUtil.DateFormatting;
import DbUtil.DataAccess;
import com.amazonaws.services.dynamodbv2.datamodeling.*;

import javax.xml.crypto.Data;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@DynamoDBTable(tableName="ShoppingLists")
public class ShoppingList{


	private String ID;

	private String shopperId;

	private LocalDateTime endedAt;

	private LocalDateTime creationDate;

	private String name;

	private String storeId;

	private boolean isActive;

	private List<String> participantIds;

	private List<String> itemInListIds;

	@DynamoDBHashKey(attributeName="ID")
	@DynamoDBAutoGeneratedKey
	public String getID() {
		return ID;
	}

	@DynamoDBAttribute(attributeName="ParticipantIds")
	public List<String> getParticipantIds() {
		return participantIds;
	}

	@DynamoDBAttribute(attributeName="ShopperId")
	public String getShopperId() {
		return shopperId;
	}

	@DynamoDBAttribute(attributeName="EndedAt")
	public String getEndedAt() {
		return DateFormatting.getFormattedDate(endedAt);
	}


	@DynamoDBAttribute(attributeName="CreationDate")
	public String getCreationDate() {
		return DateFormatting.getFormattedDate(creationDate);
	}

	@DynamoDBAttribute(attributeName="Name")
	public String getName() {
		return name;
	}

	@DynamoDBAttribute(attributeName="StoreId")
	public String getStoreId() {
		return storeId;
	}

	@DynamoDBAttribute(attributeName="IsActive")
	public boolean isActive() {
		return isActive;
	}

	@DynamoDBAttribute(attributeName="ItemInListIds")
	public List<String> getItemInListIds()
	{
		return itemInListIds;
	}

	public void setName(String name) {
		this.name = name;
	}

	public void setActive(boolean active) {
		this.isActive = active;
	}

	public void setID(String id) {
		this.ID = id;
	}

	public void setCreationDate(String creationDate) {
		this.creationDate = DateFormatting.setToFormattedDate(creationDate);
	}

	public void setParticipantIds(List<String> participantIds) {
		this.participantIds = participantIds;
	}

	public void adjustParticipantsListChanges(List<String> participantIds)
	{
		//remove existing participants which aren't included at the list
		for (String participantId : this.participantIds)
		{
			if(participantIds.contains(participantId) == false) {
				Participant p = DataAccess.getInstance().load(Participant.class, participantId);
				p.getShoppingListIds().remove(this.ID);
				DataAccess.getInstance().save(p);
			}
		}

		//remove new participants which aren't included at the list
		for (String participantId : participantIds)
		{
			if(this.participantIds.contains(participantId) == false) {
				Participant p = DataAccess.getInstance().load(Participant.class, participantId);
				p.getShoppingListIds().add(this.ID);
				DataAccess.getInstance().save(p);
			}
		}
		setParticipantIds(participantIds);
	}

	public void setShopperId(String shopperId) {
		this.shopperId = shopperId;
	}

	public void setStoreId(String storeId) {
		this.storeId = storeId;
	}
	public void setEndedAt(String endedAt) {
		this.endedAt = DateFormatting.setToFormattedDate(endedAt);
	}

	public void setItemInListIds(List<String> itemInListIds)
	{
		this.itemInListIds = itemInListIds;
	}

	public ShoppingList(String shopperId,  String name, boolean isActive, List<String> participantId,String storeId) {
		this.shopperId = shopperId;
		this.name = name;
		this.isActive = isActive;
		this.participantIds = participantId;
		this.creationDate = LocalDateTime.now();
		this.storeId =storeId;
		this.setEndedAt("");
	}

	public ShoppingList()
	{
		this.creationDate = LocalDateTime.now();
		this.setEndedAt("");
	}

	public ShoppingList createClone(String shopperId,String shoppingListName)
	{
		ShoppingList shoppingList = new ShoppingList();
		shoppingList.setActive(true);
		shoppingList.setShopperId(shopperId);
		shoppingList.setStoreId(this.storeId);
		shoppingList.setName(shoppingListName);
		DataAccess.getInstance().save(shoppingList);

		List<String> listOfItemInListIds = new ArrayList<>();
		List<String> participantListIds = new ArrayList<>();

		participantListIds.add(shopperId);

		for (String itemInListId : this.getItemInListIds())
		{
			ItemInList itemInList = DataAccess.getInstance().load(ItemInList.class,itemInListId);
			if(itemInList != null)
			{
				ItemInList clonedItemInList = itemInList.cloneItemInList(shoppingList.ID);
				if(clonedItemInList != null)
				{
					listOfItemInListIds.add(clonedItemInList.getID());
				}
			}
		}

		shoppingList.setItemInListIds(listOfItemInListIds);
		shoppingList.setParticipantIds(participantListIds);
		DataAccess.getInstance().save(shoppingList);
		return shoppingList;
	}

}
